-------------20180715-------------

qgslinestring.cpp
1.QgsLineString::QgsLineString( const QVector<double> &x, const QVector<double> &y, const QVector<double> &z, const QVector<double> &m )
此构造函数接受x、y、z、m四个数组作为参数，构造线串，为何要用QVector实现？


2.QgsLineString::QgsLineString( const QgsPoint &p1, const QgsPoint &p2 )
{
  mWkbType = QgsWkbTypes::LineString;
  mX.resize( 2 );
  mX[ 0 ] = p1.x();
  mX[ 1 ] = p2.x();
  mY.resize( 2 );
  mY[ 0 ] = p1.y();
  mY[ 1 ] = p2.y();
  if ( p1.is3D() )
  {
    mWkbType = QgsWkbTypes::addZ( mWkbType );
    mZ.resize( 2 );
    mZ[ 0 ] = p1.z();
    mZ[ 1 ] = p2.z();
  }
  if ( p1.isMeasure() )
  {
    mWkbType = QgsWkbTypes::addM( mWkbType );
    mM.resize( 2 );
    mM[ 0 ] = p1.m();
    mM[ 1 ] = p2.m();
  }
}
此构造函数以两个qgspoint类型确定一条线段，resize成员函数为重置数组大小，isMeasure函数功能为？



3.QgsLineString::QgsLineString( const QVector<QgsPointXY> &points )
{
  mWkbType = QgsWkbTypes::LineString;
  mX.reserve( points.size() );
  mY.reserve( points.size() );
  for ( const QgsPointXY &p : points )
  {
    mX << p.x();
    mY << p.y();
  }
}
QgsPointXY是什么类型？其区分于Polygon和LineString等的几何特点是？
QgsPoint即平面点，不考虑高程


4.QgsLineString::QgsLineString( const QgsLineSegment2D &segment )
{
  mWkbType = QgsWkbTypes::LineString;
  mX.resize( 2 );
  mY.resize( 2 );
  mX[0] = segment.startX();
  mX[1] = segment.endX();
  mY[0] = segment.startY();
  mY[1] = segment.endY();
}

segment线段

5.void QgsLineString::setPoints( const QgsPointSequence &points )
{
  clearCache(); //set bounding box invalid

  if ( points.isEmpty() )
  {
    clear();
    return;
  }

  //get wkb type from first point
  const QgsPoint &firstPt = points.at( 0 );
  bool hasZ = firstPt.is3D();
  bool hasM = firstPt.isMeasure();

  setZMTypeFromSubGeometry( &firstPt, QgsWkbTypes::LineString );

  mX.resize( points.size() );
  mY.resize( points.size() );
  if ( hasZ )
  {
    mZ.resize( points.size() );
  }
  else
  {
    mZ.clear();
  }
  if ( hasM )
  {
    mM.resize( points.size() );
  }
  else
  {
    mM.clear();
  }

  for ( int i = 0; i < points.size(); ++i )
  {
    mX[i] = points.at( i ).x();
    mY[i] = points.at( i ).y();
    if ( hasZ )
    {
      double z = points.at( i ).z();
      mZ[i] = std::isnan( z ) ? 0 : z;
    }
    if ( hasM )
    {
      double m = points.at( i ).m();
      mM[i] = std::isnan( m ) ? 0 : m;
    }
  }
}
点序列跟线串有什么区别

6.bool QgsLineString::insertVertex( QgsVertexId position, const QgsPoint &vertex )
{
  if ( position.vertex < 0 || position.vertex > mX.size() )
  {
    return false;
  }

  if ( mWkbType == QgsWkbTypes::Unknown || mX.isEmpty() )
  {
    setZMTypeFromSubGeometry( &vertex, QgsWkbTypes::LineString );
  }

  mX.insert( position.vertex, vertex.x() );
  mY.insert( position.vertex, vertex.y() );
  if ( is3D() )
  {
    mZ.insert( position.vertex, vertex.z() );
  }
  if ( isMeasure() )
  {
    mM.insert( position.vertex, vertex.m() );
  }
  clearCache(); //set bounding box invalid
  return true;
}
Qgis vertexID是什么？

7.void QgsLayerTree::setCustomLayerOrder( const QStringList &customLayerOrder )
{
  QList<QgsMapLayer *> layers;

  for ( const auto &layerId : customLayerOrder )
  {
    QgsLayerTreeLayer *nodeLayer = findLayer( layerId );
    if ( nodeLayer )
    {
      // configuration from 2.x projects might have non spatial layers
      QgsMapLayer *layer = nodeLayer->layer();
      if ( !layer || !layer->isSpatial() )
      {
        continue;
      }
      layers.append( layer );
    }
  }
  setCustomLayerOrder( layers );
}

QList的特性是？QgsMapLayer

8.Qextserialport中的函数在qgpsdetector.cpp中被引用
试图修改qgsgpsdetector.cpp中的advance函数中对qextserialport的引用，然后qgis_core编译成功，但无法启动

9.解决方案编译成功以后生成的obj链接文件存放在qgis_core.dir/debug中


10.编译成功以后还是无法打开exe文件，原因是编译模式错误：应该用relwithdebug而不是debug模式，用relwithdebug模式编译成功以后将嘉谕发的链接库拷贝到exe旁边就可以启动，不需要替换qgis_app.dll
-------------20180716-------------
1.修改了qgisapp.ui的xml文档中第196行测试
2.修改了qgisapp.cpp的701行启动界面输出文字，遭遇错误，原因是字符编码问题，要改成utf-8带BOM。修改以后启动界面输出文字得到修改
3.qgisapp.cpp第4456行的函数名为：addUserForGDALSublayers，添加图层的函数
4.svg文件存放在源代码目录的image/svg|theme/default中

5.QgisAppInterface *mQgisInterface = nullptr;
    friend class QgisAppInterface;

    QSplashScreen *mSplash = nullptr;
    //! list of recently opened/saved project files
    QList<QgsWelcomePageItemsModel::RecentProjectData> mRecentProjects;

    //! Currently open layout designer dialogs
    QSet<QgsLayoutDesignerDialog *> mLayoutDesignerDialogs;

qgisapp.h约两千多行左右定义了可操控界面行为的成员

6.Please input the key word that you want to search:splash.png
Please input the directory:/Users/zhuge//qgis-3.0.2/
/Users/zhuge//qgis-3.0.2///ChangeLog
/Users/zhuge//qgis-3.0.2/images//images.qrc
/Users/zhuge//qgis-3.0.2/images/splash//README_SPLASH
/Users/zhuge//qgis-3.0.2/scripts//release.pl
/Users/zhuge//qgis-3.0.2/src/app//main.cpp
Finish searching.

程序启动时的图片名为splash.png，存放于images/splash文件夹中，在main.cpp的第1242行调用了该图片。

  }

  //set up splash screen
  QString mySplashPath( QgsCustomization::instance()->splashPath() );
  QPixmap myPixmap( mySplashPath + QStringLiteral( "splash.png" ) );

  int w = 600 * qApp->desktop()->logicalDpiX() / 96;
  int h = 300 * qApp->desktop()->logicalDpiY() / 96;

  QSplashScreen *mypSplash = new QSplashScreen( myPixmap.scaled( w, h, Qt::KeepAspectRatio, Qt::SmoothTransformation ) );
  if ( !myHideSplash && !mySettings.value( QStringLiteral( "qgis/hideSplash" ) ).toBool() )
  {
    //for win and linux we can just automask and png transparency areas will be used
    mypSplash->setMask( myPixmap.mask() );
    mypSplash->show();
  }

  QPixmap是继承自QPaintDevice的子类，可以接受一个字符串作为文件的路径来显示这个文件（png、jpeg之类），QPixmap与底层显示设备息息相关，所以在不同操作系统平台上，QPixmap的显示可能会有所差别




  7.void QgisApp::addMapLayer( QgsMapLayer *mapLayer )
{
  freezeCanvases();

// Let render() do its own cursor management
//  QApplication::setOverrideCursor(Qt::WaitCursor);

  if ( mapLayer->isValid() )
  {
    // Register this layer with the layers registry
    QList<QgsMapLayer *> myList;
    myList << mapLayer;
    QgsProject::instance()->addMapLayers( myList );
    // add it to the mapcanvas collection
    // not necessary since adding to registry adds to canvas mMapCanvas->addLayer(theMapLayer);
  }
  else
  {
    QString msg = tr( "The layer is not a valid layer and can not be added to the map" );
    messageBar()->pushMessage( tr( "Layer is not valid" ), msg, Qgis::Critical, messageTimeout() );
  }

  // draw the map
  freezeCanvases( false );
  refreshMapCanvas();

// Let render() do its own cursor management
//  QApplication::restoreOverrideCursor();

}

addMapLayer函数在qgisapp.cpp的约10580行左右，其中包括特征信息：加载图层失败时会返回错误信息（比如只有一个shp文件而没有shx等其它辅助文件，则会报错）


8.qgis画图是通过QgisApp::refreshMapCanvas和canvas->refreshAllLayers完成，其中canvas是QgsMapCanvas的成员，在qgisapp.cpp约8848行为refreshMapCanvas的定义

9. zhuge$ python search_file.py
Please input the key word that you want to search:refreshAllLayers
Please input the directory:/Users/zhuge//qgis-3.0.2/
/Users/zhuge//qgis-3.0.2/python/gui//qgsmapcanvas.sip.in
/Users/zhuge//qgis-3.0.2/src/app//qgisapp.cpp
/Users/zhuge//qgis-3.0.2/src/app//qgsstatusbarcoordinateswidget.cpp
/Users/zhuge//qgis-3.0.2/src/app/layout//qgslayoutdesignerdialog.cpp
/Users/zhuge//qgis-3.0.2/src/gui//qgsmapcanvas.cpp
/Users/zhuge//qgis-3.0.2/src/gui//qgsmapcanvas.h
/Users/zhuge//qgis-3.0.2/src/plugins/offline_editing//offline_editing_plugin.cpp
/Users/zhuge//qgis-3.0.2/tests/src/python//test_qgsmapcanvas.py
Finish searching.

readProjects和writeProject函数在qgsmapcanvas.cpp中被实现，鼠标事件、最小外包矩形、设置中心点、比例尺等也在此被实现
mapSettings
10。QColor与QColorDialog区别


11.void QgsMapCanvas::flashFeatureIds( QgsVectorLayer *layer, const QgsFeatureIds &ids,
                                    const QColor &color1, const QColor &color2,
                                    int flashes, int duration )
{
  if ( !layer )
  {
    return;
  }

  QList< QgsGeometry > geoms;

  QgsFeatureIterator it = layer->getFeatures( QgsFeatureRequest().setFilterFids( ids ).setSubsetOfAttributes( QgsAttributeList() ) );
  QgsFeature fet;
  while ( it.nextFeature( fet ) )
  {
    if ( !fet.hasGeometry() )
      continue;
    geoms << fet.geometry();
  }

  flashGeometries( geoms, layer->crs(), color1, color2, flashes, duration );
}

void QgsMapCanvas::flashGeometries( const QList<QgsGeometry> &geometries, const QgsCoordinateReferenceSystem &crs, const QColor &color1, const QColor &color2, int flashes, int duration )
{
  if ( geometries.isEmpty() )
    return;

  QgsWkbTypes::GeometryType geomType = QgsWkbTypes::geometryType( geometries.at( 0 ).wkbType() );
  QgsRubberBand *rb = new QgsRubberBand( this, geomType );
  for ( const QgsGeometry &geom : geometries )
    rb->addGeometry( geom, crs );

  if ( geomType == QgsWkbTypes::LineGeometry || geomType == QgsWkbTypes::PointGeometry )
  {
    rb->setWidth( 2 );
    rb->setSecondaryStrokeColor( QColor( 255, 255, 255 ) );
  }
  if ( geomType == QgsWkbTypes::PointGeometry )
    rb->setIcon( QgsRubberBand::ICON_CIRCLE );

  QColor startColor = color1;
  if ( !startColor.isValid() )
  {
    if ( geomType == QgsWkbTypes::PolygonGeometry )
    {
      startColor = rb->fillColor();
    }
    else
    {
      startColor = rb->strokeColor();
    }
    startColor.setAlpha( 255 );
  }
  QColor endColor = color2;
  if ( !endColor.isValid() )
  {
    endColor = startColor;
    endColor.setAlpha( 0 );
  }


  QVariantAnimation *animation = new QVariantAnimation( this );
  connect( animation, &QVariantAnimation::finished, this, [animation, rb]
  {
    animation->deleteLater();
    delete rb;
  } );
  connect( animation, &QPropertyAnimation::valueChanged, this, [rb, geomType]( const QVariant & value )
  {
    QColor c = value.value<QColor>();
    if ( geomType == QgsWkbTypes::PolygonGeometry )
    {
      rb->setFillColor( c );
    }
    else
    {
      rb->setStrokeColor( c );
      QColor c = rb->secondaryStrokeColor();
      c.setAlpha( c.alpha() );
      rb->setSecondaryStrokeColor( c );
    }
    rb->update();
  } );

  animation->setDuration( duration * flashes );
  animation->setStartValue( endColor );
  double midStep = 0.2 / flashes;
  for ( int i = 0; i < flashes; ++i )
  {
    double start = static_cast< double >( i ) / flashes;
    animation->setKeyValueAt( start + midStep, startColor );
    double end = static_cast< double >( i + 1 ) / flashes;
    if ( !qgsDoubleNear( end, 1.0 ) )
      animation->setKeyValueAt( end, endColor );
  }
  animation->setEndValue( endColor );
  animation->start();
}

上面代码在qgsmapcanvas.cpp约一千一百多行，疑似读取图层数据并真正绘制的逻辑
-------------20180717-------------

1.QgsRubberBand扩展了Qt中的橡皮筋类QRubberBand：qgsrubberband.cpp - Rubberband widget for drawing multilines and polygons

此文件中包含void QgsRubberBand::addGeometry( const QgsGeometry &geometry, QgsVectorLayer *layer )函数的实现

void QgsRubberBand::drawShape( QPainter *p, const QVector<QPointF> &pts )
{
  switch ( mGeometryType )
  {
    case QgsWkbTypes::PolygonGeometry:
    {
      p->drawPolygon( pts );
    }
在约410行左右有drawPolygon、drawPolyline等函数的调用，这些都是Qpainter类中的函数，帮助文档参见http://doc.qt.io/qt-5/qpainter.html

2.在QGIS中打开栅格图，属性->直方图，点击计算直方图即可显示直方图
在core目录下有qgshistogram.cpp等。
在core/raster目录下有gsrasterdataprovider.h，其中定义了栅格图的直方图属性字段：最小值、最大值、行数、高度。
core/diagram目录下有各种图表的cpp文件，分别是饼状图、柱状图、文本图
可参考https://blog.csdn.net/deirjie/article/details/51069359


3.QgsGeometry QgsGeometry::fromPointXY( const QgsPointXY &point )
{
  std::unique_ptr< QgsAbstractGeometry > geom( QgsGeometryFactory::fromPointXY( point ) );
  if ( geom )
  {
    return QgsGeometry( geom.release() );
  }
  return QgsGeometry();
}

读取点坐标，转换成QgsGeometry类型，frompointXY的定位应该是基于旧版本中的frompoint作扩展

4.std::unique_ptr< QgsAbstractGeometry > QgsGeometryFactory::fromPointXY( const QgsPointXY &point )
{
  return qgis::make_unique< QgsPoint >( point.x(), point.y() );
}

std::unique_ptr<QgsMultiPoint> QgsGeometryFactory::fromMultiPointXY( const QgsMultiPointXY &multipoint )
{
  std::unique_ptr< QgsMultiPoint > mp = qgis::make_unique< QgsMultiPoint >();
  QgsMultiPointXY::const_iterator ptIt = multipoint.constBegin();
  for ( ; ptIt != multipoint.constEnd(); ++ptIt )
  {
    QgsPoint *pt = new QgsPoint( ptIt->x(), ptIt->y() );
    mp->addGeometry( pt );
  }
  return mp;
}

std::unique_ptr<QgsAbstractGeometry> QgsGeometryFactory::fromPolylineXY( const QgsPolylineXY &polyline )
{
  return linestringFromPolyline( polyline );
}

std::unique_ptr<QgsMultiLineString> QgsGeometryFactory::fromMultiPolylineXY( const QgsMultiPolylineXY &multiline )
{
  std::unique_ptr< QgsMultiLineString > mLine = qgis::make_unique< QgsMultiLineString >();
  for ( int i = 0; i < multiline.size(); ++i )
  {
    mLine->addGeometry( fromPolylineXY( multiline.at( i ) ).release() );
  }
  return mLine;
}
qgsgeometryfactory.cpp中！！！

5.QPointF、QgsPointXY、QgsPoint、QPoint区别
qgspointXY.cpp在core目录下，qgspoint.cpp在core/src目录下。
QPointF以浮点形式表征平面上的点，QPoint以整数形式表征平面上的点。
QgsPointXY表征平面点，QgsPoint有x、y、z、m四个分量


总结：～qgsvectorlayerdiagramprovider.h／cpp中有一个regesterDiagram函数，貌似是用来生成图表feature的。打开某个shp文件，在属性中可以选择该文件的字段进行直方图、饼状图、或文字图表生成。
如果是画饼状图，最终是执行了QgsPieDiagram::renderDiagram函数，饼活着椭圆都是借助QPaint的函数绘制的。
结合软件操作分析，调用函数绘制直方图／饼图等的方法为：获取工作图层->创建图表对象->设置图表参数（QgsDiagramLayerSettings类，设置大小、字段、图例、名称等等）->调用渲染图表函数->(refresh)

～绘制基本图形方法，加载点文件中的数据->判断类型后在qgsgeometryfactory处理成QgsGeometry形式返回->...->gui/QgsRubberBand类中addGeometry，还要注意选择画布、坐标系统->drawshape()(这里已经用到QPaint的成员函数了)

